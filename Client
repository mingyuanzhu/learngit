/**
 * 
 */
package nio;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.SocketAddress;
import java.nio.ByteBuffer;
import java.nio.channels.SelectionKey;
import java.nio.channels.Selector;
import java.nio.channels.SocketChannel;
import java.util.Iterator;
import java.util.concurrent.TimeUnit;

/**
 * 
 * 
 * @author zhumingyuan
 * @date Jun 6, 2015 8:26:15 PM
 */
public class Client {

    int i = 0;

    private Selector selector;

    public static void main(String[] args) {
        Client client = new Client();
        client.connection(8080);
        client.listen();
    }

    public void connection(int port) {
        try {
            selector = Selector.open();
            SocketAddress address = new InetSocketAddress(port);
            SocketChannel channel = SocketChannel.open();
            channel.configureBlocking(false);
            channel.connect(address);
            channel.register(selector, SelectionKey.OP_CONNECT);
            System.out.println("client is started");
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void listen() {
        if (selector.isOpen()) {
            for (;;) {
                try {
                    selector.select();
                    Iterator<SelectionKey> iterator = selector.selectedKeys().iterator();
                    while (iterator.hasNext()) {
                        SelectionKey selectionKey = iterator.next();
                        iterator.remove();
                        if (selectionKey.isConnectable()) {
                            SocketChannel channel = (SocketChannel) selectionKey.channel();
                            // 如果正在连接，则完成连接
                            if (channel.isConnectionPending()) {
                                channel.finishConnect();
                            }
                            // 设置成非阻塞
                            channel.configureBlocking(false);
                            channel.write(ByteBuffer.wrap(new String("send msg " + i++
                                            + " to server").getBytes()));
                            channel.register(selector, SelectionKey.OP_READ);
                        } else if (selectionKey.isReadable()) {
                            try {
                                TimeUnit.SECONDS.sleep(3);
                                SocketChannel channel = (SocketChannel) selectionKey.channel();
                                // 创建读取的缓冲区
                                ByteBuffer buffer = ByteBuffer.allocate(100);
                                channel.read(buffer);
                                byte[] content = buffer.array();
                                System.out.println(new String(content));
                                channel.write(ByteBuffer.wrap(new String("send msg " + i++
                                                + " to server").getBytes()));
                                channel.register(selector, SelectionKey.OP_READ);
                            } catch (InterruptedException e) {
                                e.printStackTrace();
                            }
                        }
                    }
                } catch (IOException e) {
                    // TODO Auto-generated catch block
                    e.printStackTrace();
                }
            }
        }
    }
}
